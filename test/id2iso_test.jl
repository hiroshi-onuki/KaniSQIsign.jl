using Nemo
using KaniSQIsign
using KaniSQIsign.Level1
import KaniSQIsign.Level1: ideal_to_isogeny_from_O0

p = KaniSQIsign.Level1.p
e1 = KaniSQIsign.Level1.ExponentForIsogeny
e2 = KaniSQIsign.Level1.ExponentForTorsion
Fp2, i, cdata = KaniSQIsign.Level1.make_field_curve_torsions()
a24_0 = tdata.a24_0
xP0 = tdata.xP2e
xQ0 = tdata.xQ2e
xPQ0 = tdata.xPQ2e

N = 3 * 5 * 79
e = 4*Int(ceil(log(2, p))) + e1

a = QOrderElem(1)
a, found = FullRepresentInteger(N*BigInt(2)^e)
a = div(a, gcd(a))
println((a[1] - a[2]) % 2 == 0 && (a[3] - a[4]) % 2 == 0)

a = QOrderElem(168082123654050744778996387641574941677314667606066074978750034663303195240598928771394263744915916019712993146821097074055019317214177783512247070593762705522957193601412, 290475121935060369528280295437947531300840252723913376278647347304065523783601994054482835948285018743520397621340134881884658475384029520874884280915263793538215168188281, 972444482673414445000286753217595837683916086717251938159230044415087772058527255439372289073551914230201772368055038666995203906987, -2016948722110680185238295871178154499691515430257255802134678920457372233599340826676216189261523778821756564157794034320470816525733)

println(factor(ZZ(norm(a))))
I = LeftIdeal(a, BigInt(2)^(4*e1) * 3 * 5 * 79)
@assert isin(a, I)
@assert valid_ideal(I)
@assert gcd(I) == 1
println(factor(ZZ(norm(I))))

a24 = ideal_to_isogeny_from_O0(I, 4*e1, cdata)