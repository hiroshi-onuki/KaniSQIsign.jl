using Nemo
import KaniSQIsign: Weil_pairing_2power, random_point, random_point_order_2power,
    Proj1, Point, odd_isogeny, is_infinity, ladder, Montgomery_coeff,
    xDBLe, CouplePoint, gluing_isogeny, product_isogeny_no_strategy, product_isogeny

function basis_2power_torsion(A::T, e::Integer) where T <: RingElem
    p = characteristic(parent(A))
    @assert (p + 1) % ZZ(2)^e == 0
    xP = random_point_order_2power(A, p + 1, e)
    P = Point(A, xP)
    while true
        xQ = random_point_order_2power(A, p + 1, e)
        Q = Point(A, xQ)
        weil = Weil_pairing_2power(A, P, Q, e)
        if weil^(ZZ(2)^(e-1)) != 1
            @assert weil^(ZZ(2)^e) == 1
            return P, Q
        end
    end
end

p = ZZ(21733158535462224051193457152486610816840494993914547553836971106544815964159)
R, T = polynomial_ring(GF(p), "T")
Fp2, i = finite_field(T^2 + 1, "i")
n = 126

A1 = Fp2(0)
A2 = Fp2(9605464016777668925155414347727821725698708623374556961970507310131736067972*i+9666027196945263587856528610010175222186794341135921247228166789267059117247)
a24_1 = Proj1(A1 + 2, Fp2(4))
a24_2 = Proj1(A2 + 2, Fp2(4))

xP1 = Proj1(216434799814958236859909207527888081108259142705534202957608094521858560039*i + 4607931223502399333776782442858082971008774506483322627968163866910106400867)
xQ1 = Proj1(2551264489632946648071352917988880536127114593842903756427780543847459775510*i + 5004346411686464008980982934336675110707999550510535981970495692413484160571)
xP2 = Proj1(16409467374372128990492243219397481788618580818455117645970207430732768462559*i + 10455802894614407083646398151892020082279911342386177214097535320233320661652)
xQ2 = Proj1(8857467233983171813428158772988661802949602559301472076390965995285624387976*i + 1888268892996689024834383337940386223003565882043658994231154916183554442153)
xP1Q1 = Proj1(2035282106195628209080382543982800451645522778442835277094127476963040730428*i + 9372672122369791004975915732205872383273114885580916893699223467613120767426)
xP2Q2 = Proj1(6040378870136338791070937037256523840844855169267464746865238314587400451896*i + 10728946449908950043692429923961798407345563695575922119826262121445377938090)

P1P2 = CouplePoint(xP1, xP2)
Q1Q2 = CouplePoint(xQ1, xQ2)
P1Q1P2Q2 = CouplePoint(xP1Q1, xP2Q2)

codomain, images = product_isogeny_no_strategy(a24_1, a24_2, P1P2, Q1Q2, P1Q1P2Q2, CouplePoint{FqFieldElem}[], n)
println(codomain)
@time product_isogeny_no_strategy(a24_1, a24_2, P1P2, Q1Q2, P1Q1P2Q2, CouplePoint{FqFieldElem}[], n)

strategy= Int[125, 36, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 13, 8, 5, 3, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1]
codomain, images = product_isogeny(a24_1, a24_2, P1P2, Q1Q2, P1Q1P2Q2, CouplePoint{FqFieldElem}[], n, strategy)
println(codomain)
@time product_isogeny(a24_1, a24_2, P1P2, Q1Q2, P1Q1P2Q2, CouplePoint{FqFieldElem}[], n, strategy)