include("level3/prime.jl")
include("level3/klpt_constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")
include("order_data.jl")

include("../elliptic_curves/dlog.jl")

include("../ideal_to_isogeny/ideal_to_isogeny.jl")

include("../sqisign/sqisign.jl")

const StrategyDim2 = compute_strategy(ExponentForIsogenyDim2 - 2, 2, 1)
const StrategyDim2Precompute = compute_strategy(ExponentForIsogenyDim2 - 4, 2, 1)
const StrategiesDim1 = Dict(
    ExponentForIsogenyDim1 - 2 => compute_strategy(div(ExponentForIsogenyDim1 - 2,2) - 1, 1, 1),
    ExponentForIsogenyDim1 => compute_strategy(div(ExponentForIsogenyDim1,2) - 1, 1, 1),
    2*ExponentForIsogenyDim1 => compute_strategy(div(2*ExponentForIsogenyDim1,2) - 1, 1, 1),
    ExponentForSignLastIsogeny => compute_strategy(div(ExponentForSignLastIsogeny, 2) - 1, 1, 1),
    ExponentForVerifyLastIsogeny => compute_strategy(div(ExponentForVerifyLastIsogeny, 2) - 1, 1, 1),
    SQISIGN_challenge_length => compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1),
    ExponentForCommitmentLastIsogeny => compute_strategy(div(ExponentForCommitmentLastIsogeny, 2) - 1, 1, 1)
)

# Fp2 and values in Fp2
function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")
    
    A0 = Fp2(0)

    # constatns from precompute/level3torsion.sage
    P2e = Point(229533218328438620797146144902074036097650646691004213902321898118634991004544719861045563604242414906309374760122*Fp2_i + 184073103580813409406936436761269367837507865545889711758420697839080746094121382051780966189639021271084070039153, 50812657120873955984060250824159406386332371784037661221247756797367861148003993683065123309103602996109878778708*Fp2_i + 272935925708629511258549909696413210126659812834813116878791750445016202632223016006247407626786164169657028643083)
    Q2e = Point(326000438371214986260743153384862901705902806157965401594263537451479860632165219789631652269684313183676652202821*Fp2_i + 371460553118840197650952861525667569966045587303079903738164737731034105542588557598896249684287706818901956923790, 272935925708629511258549909696413210126659812834813116878791750445016202632223016006247407626786164169657028643083*Fp2_i + 504720999578779651073829047462777531417221081064931954275337678772746990488705945967612092564823125093876148184235)
    M_i_2e = [0 2404907604760405225358828131112281116032698930082119547604265954848982041717359046106827774346003151904701415423; 1 0]
    M_ij_2e = [306246178196511653312082010308503840880803534982004527362436354241846791702650648094657382195950671439440771220 1331859506750701945133354991096785177166196247024004316743043580849198917912938155438223242077096924906425558671; 1331859506750701945133354991096785177166196247024004316743043580849198917912938155438223242077096924906425558672 2098661426563893572046746120803777275151895395100115020241829600607135250014708398012170392150052480465260644204]
    M_1k_2e = [1073048098009703280225473140015495938866502683058115230861222373999783123804420890668604532268906226998275856753 306246178196511653312082010308503840880803534982004527362436354241846791702650648094657382195950671439440771220; 306246178196511653312082010308503840880803534982004527362436354241846791702650648094657382195950671439440771220 1331859506750701945133354991096785177166196247024004316743043580849198917912938155438223242077096924906425558672]
    M44inv
    xP3 = Proj1(410918273292359603317559370722931045006689920201530154329324795599229966497484673901655299112974459646304324267933*Fp2_i)
    xQ3 = Proj1(144615383407294003740329927564005892796863532647439461167260639970884885139225265749021916760952268443681702695010*Fp2_i)
    xPQ3 = Proj1(Fp2(28895978617052440895242536270919571743498526468749974117672781525115093576175751931530139155647634685784165775828))
    M_i_3 = [0 1; 2 0]
    M_ij_3 = [0 0; 2 0]
    M_1k_3 = [0 0; 0 1]
    xP7 = Proj1(280086862956025182201620286893752917892959648180972668630126887834121164268177245092376915524064168055991987815891*Fp2_i)
    xQ7 = Proj1(443328548600801526585355159166819130323197594695140517882335015365135723168635807034774228886542861028925299762156*Fp2_i + 521768507368889500053391533648831431558295287743509576441805395116457805408606608044769136987685597192149718260886)
    xPQ7 = Proj1(455158149538658545836160938733469136988401199255975133561918961137036951065481398518320967488165000341908903082565*Fp2_i + 267849955472444689650959131923630781206160852617651574191110175021907264236114750157545956178494918801916294466746)
    M_i_7 = [4 5; 5 3]
    M_ij_7 = [4 1; 5 3]
    M_1k_7 = [0 5; 0 1]
    xP11 = Proj1(986214743930695754018516497922845767843851504089938634872543520788741797678569464458069223476434879886404208270*Fp2_i + 53115388287771514929712389116043932194647861424612864010284913795513108486288438881225261179461916471434804373244)
    xQ11 = Proj1(223485852424189264919816345780068700591949049604364714273158003170292849014639337349665404935474885504991060892103*Fp2_i)
    xPQ11 = Proj1(167234109761982788553029080812323114300285577851015231701475110062841916237964105650384026664162796363830233472827*Fp2_i + 387331954359142678387975668818123651942512636998022646531815221644407037333306120245545606565178266649437558083413)
    M_i_11 = [6 3; 6 5]
    M_ij_11 = [0 0; 7 0]
    M_1k_11 = [0 0; 2 1]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)
    xP2e_short = xDBLe(xP2e, a24_0, ExponentForIsogenyDim1)
    xQ2e_short = xDBLe(xQ2e, a24_0, ExponentForIsogenyDim1)
    xPQ2e_short = xDBLe(xPQ2e, a24_0, ExponentForIsogenyDim1)

    # precomputed values for discrete logarithm
    tp_table = make_pairing_table(A0, P2e, ExponentFull)
    tp_P2e_Q2e = Tate_pairing_P0(Q2e, tp_table, Cofactor)
    window_size = 3
    fq_dlog_table1, fq_dlog_table2 = make_dlog_table(tp_P2e_Q2e, ExponentFull, window_size)
    strategy_dlog = compute_strategy(div(ExponentFull, window_size) - 1, window_size, 1)
    dlog_data_full = DlogData(ExponentFull, window_size, fq_dlog_table1, fq_dlog_table2, strategy_dlog)
    base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - SQISIGN_challenge_length))
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, SQISIGN_challenge_length, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)

    DegreesOddTorsionBases = [3, 7, 11]
    ExponentsOddTorsionBases = [1, 1, 1]
    OddTorsionBases = [[xP3, xQ3, xPQ3], [xP7, xQ7, xPQ7], [xP11, xQ11, xPQ11]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = [[M_i_3, M_ij_3, M_1k_3], [M_i_7, M_ij_7, M_1k_7], [M_i_11, M_ij_11, M_1k_11]]

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    gamma = gamma[1]/gamma[2]
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    gamma_d = gamma_d[1]/gamma_d[2]
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    E0 = E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, xP2e_short, xQ2e_short, xPQ2e_short, DegreesOddTorsionBases, ExponentsOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, isomorphism_to_A0, dlog_data_full, dlog_data_chall, tp_table)

    orders_data = [compute_order_d(E0, d) for d in [2, 7, 11]]
    @assert orders_data[1].j_inv == 8000
    @assert orders_data[2].j_inv == -3375 || orders_data[2].j_inv == 16581375
    @assert orders_data[3].j_inv == -32768 || orders_data[3].j_inv^3 - 1122662608*orders_data[3].j_inv^2 + 270413882112*orders_data[3].j_inv - 653249011576832 == 0
    return Fp2, Fp2_i, GlobalData(E0, orders_data)
end